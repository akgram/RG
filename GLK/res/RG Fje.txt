OSNOVNE FJE KOJE SU UVEK ISTE: PrepareScene(), DrawScene() i Reshape()
DODATNE: DrawAxes() i LoadTexture()

PREPARESCENE():
------------------------------------------------------------------------
glClearColor(1.0, 1.0, 1.0, 1.0);
glEnable(GL_DEPTH_TEST);
glEnable(GL_TEXTURE_2D);
tekstura = LoadTexture("putanja");
...teksture...
------------------------------------------------------------------------

DRAWSCENE():
------------------------------------------------------------------------
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
glLoadIdentity();

double eyeX = rCam * sin(betaCam) * cos(alfaCam);
double eyeY = rCam * cos(betaCam);
double eyeZ = rCam * sin(betaCam) * sin(alfaCam);

gluLookAt( eyeX, eyeY, eyeZ,0, 0, 0,0, 1, 0 );

//DRAW FJE
glFlush();
SwapBuffers(pDC->m_hDC);
------------------------------------------------------------------------

RESHAPE():
------------------------------------------------------------------------
glViewport(0, 0, (GLsizei)w, (GLsizei)h);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPerspective(FOV, (double)w/(double)h, 0.1, 2000);
glMatrixMode(GL_MODELVIEW);
------------------------------------------------------------------------

DRAWAXES():
------------------------------------------------------------------------
if(r < 10)
	r = 10;
if(r > 50)
	r = 50;		// FOV=50
float camX = r * sin(angle);
float camY = r * cos(angle);
float camZ = 40; 	// 50 - 10 ???
gluLookAt(camX, camY, camZ, 0, 5 + kameraY, 0, 0, 1, 0);	
//Prva 3-odakle se gleda, 
//Druga 3-centar gde se gleda, 
//Treca 3-po kojoj osi se pomera pogled
glLineWidth(2.0);
glBegin(GL_LINES);
glColor3f(0,0,1);
glVertex3f(0,0,0);
glVertex3f(50,0,0);
glColor3f(1,0,0);
glVertex3f(0,0,0);
glVertex3f(0,50,0);
glColor3f(0,1,0);
glVertex3f(0,0,0);
glVertex3f(0,0,50);
glEnd();
------------------------------------------------------------------------

LOADTEXTURE():
------------------------------------------------------------------------
UINT texID;
DImage img;
img.Load(CString(fileName));
glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
glGenTextures(1, &texID);
glBindTexture(GL_TEXTURE_2D, texID);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
gluBuild2DMipmaps(GL_TEXTURE_2D, GL_RGBA, img.Width(), img.Height(), 
GL_BGRA_EXT, GL_UNSIGNED_BYTE, img.GetDIBBits());

return texID;
------------------------------------------------------------------------

void SetLightingParams()
{
    GLfloat ambient[] = { 0.3f, 0.3f, 0.3f, 1.0f };
    GLboolean localViewer = GL_TRUE;
    GLboolean twoSide = GL_TRUE;

    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambient);
    glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, localViewer);
    glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, twoSide);

    glEnable(GL_LIGHTING);
}

------------------------------------------------------------------------

void setLightParams(int glLight)
{
    GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
    GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
    GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };

    GLfloat light_position[] = { 0.0f, 0.0f, 0.0f, 1.0f }; // pozicija OD
    GLfloat light_direction[] = { 0.0f, 0.0f, -1.0f };      // (-z) ka CEMU x, y, z

    glLightfv(glLight, GL_AMBIENT, light_ambient);
    glLightfv(glLight, GL_DIFFUSE, light_diffuse);
    glLightfv(glLight, GL_SPECULAR, light_specular);
    glLightfv(glLight, GL_POSITION, light_position);
    glLightfv(glLight, GL_SPOT_DIRECTION, light_direction);

    glLightf(glLight, GL_SPOT_CUTOFF, 45.0f);      // ugao konusa
    glLightf(glLight, GL_SPOT_EXPONENT, 10.0f);    // koncentracija

    // mala atenuacija (slabljenje sa rastojanjem)
    glLightf(glLight, GL_CONSTANT_ATTENUATION, 1.0f);
    glLightf(glLight, GL_LINEAR_ATTENUATION, 0.05f);
    glLightf(glLight, GL_QUADRATIC_ATTENUATION, 0.0f);

    glEnable(glLight);
}
------------------------------------------------------------------------

void SetMaterial(float diffuse[])
{
    GLfloat ambient[]  = { diffuse[0] * 0.5f, 
		diffuse[1] * 0.5f, diffuse[2] * 0.5f, 1.0f };
    GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
    GLfloat emission[] = { 0.0f, 0.0f, 0.0f, 1.0f };
    GLfloat shininess  = 64.0f;

    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, ambient);
    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, diffuse);
    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, specular);
    glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, emission);
    glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, shininess);
}

------------------------------------------------------------------------
void InitScene() // poziva se u DrawScene 
		ili pojedinacno pre crtanja ostalih
{
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);

    SetLightingParams();
    setLightParams(GL_LIGHT0);

    GLfloat diff[] = {0.8f, 0.2f, 0.2f, 1.0f};
    SetMaterial(diff);
}
------------------------------------------------------------------------