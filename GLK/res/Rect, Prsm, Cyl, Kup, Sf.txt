DrawScene()
-------------------------------------------------
DrawAxes();
glEnable(GL_LIGHTING);
glEnable(GL_LIGHT1);
glEnable(GL_LIGHT2);
SetLightingParams();

SetLightParams(GL_LIGHT1);
SetLightParams(GL_LIGHT2);

glEnable(GL_CULL_FACE);
float dif[] = {1, 1, 0, 1};
SetMaterial(dif);
DrawPrism(70, 42, 70, 10);
glDisable(GL_CULL_FACE);

glTranslated(0, 42 / 2 - 5, 0);
float dif1[] = { 1, 1, 1, 1 };
SetMaterial(dif1);
DrawCameras(1, 5, 40, 110, 0, 4);

glFlush();
SwapBuffers(pDC->m_hDC);

----------------------------------------------------------------------------------
void CGLRenderer::DrawRect(float a, float b, int n)
{
	glPushMatrix();

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			float x = -a / 2 + i * a / n;
			float y = -b / 2 + j * b / n;

			glBegin(GL_QUADS);

			glTexCoord2f((float)i / n, (float)j / n);
			glNormal3f(0, 0, 1);
			glVertex3f(x, y, 0);

			glTexCoord2f((float)(i + 1) / n, (float)j / n);
			glNormal3f(0, 0, 1);
			glVertex3f(x + a / n, y, 0);

			glTexCoord2f((float)(i + 1) / n, (float)(j + 1) / n);
			glNormal3f(0, 0, 1);
			glVertex3f(x + a / n, y + b / n, 0);

			glTexCoord2f((float)i / n, (float)(j + 1) / n);
			glNormal3f(0, 0, 1);
			glVertex3f(x, y + b / n, 0);

			glEnd();
		}
	}

	glPopMatrix();
}

-----------------------------------------------------------------------------------

void CGLRenderer::DrawPrism(float a, float b, float c, int n)
{
	glPushMatrix(); // prednja
	glTranslated(0, 0, c / 2);
	glNormal3f(0, 0, 1);
	DrawRect(a, b, n);
	glPopMatrix();

	glPushMatrix(); // zadnja
	glTranslated(0, 0, -c / 2);
	glNormal3f(0, 0, 1);
	DrawRect(a, b, n);
	glPopMatrix();

	glPushMatrix(); // leva
	glTranslated(-a / 2, 0, 0);
	glRotated(90, 0, 1, 0);
	glNormal3f(0, 0, 1);
	DrawRect(c, b, n);
	glPopMatrix();

	glPushMatrix(); // desna
	glTranslated(a / 2, 0, 0);
	glRotated(90, 0, 1, 0);
	glNormal3f(0, 0, 1);
	DrawRect(c, b, n);
	glPopMatrix();

	glPushMatrix(); // gornja
	glTranslated(0, b / 2, 0);
	glRotated(90, 1, 0, 0);
	glNormal3f(0, 0, 1);
	DrawRect(a, c, n);
	glPopMatrix();

	glPushMatrix(); // donja
	glTranslated(0, -b / 2, 0);
	glRotated(90, 1, 0, 0);
	glNormal3f(0, 0, 1);
	DrawRect(a, c, n);
	glPopMatrix();
}

--------------------------------------------------------------------------------------
void CGLRenderer::DrawCylindar(float r, float b, int nR)
{
	glPushMatrix();

	double alfa = 2 * 3.14 / nR;

	glBegin(GL_TRIANGLE_FAN); // donja
	glVertex3f(0, 0, 0);
	for (int i = 0; i <= nR; i++)
	{
		double step = alfa * i;
		float x = r * cos(step);
		float z = r * sin(step);

		glVertex3f(x, 0, z);
	}
	glEnd();

	glBegin(GL_QUADS); // omotac
	for (int i = 0; i < nR; i++)
	{
		//double step = alfa * i;
		float x1 = r * cos(alfa * i);
		float z1 = r * sin(alfa * i);

		float x2 = r * cos(alfa * i);
		float z2 = r * sin(alfa * i);

		float x12 = r * cos(alfa * (i + 1));
		float z12 = r * sin(alfa * (i + 1));

		float x22 = r * cos(alfa * (i + 1));
		float z22 = r * sin(alfa * (i + 1));

		glVertex3f(x1, b, z1);
		glVertex3f(x12, b, z12);
		glVertex3f(x22, 0, z22);
		glVertex3f(x2, 0, z2);
	}
	glEnd();

	glBegin(GL_TRIANGLE_FAN); // gornja
	glVertex3f(0, b, 0);
	for (int i = 0; i <= nR; i++)
	{
		double step = alfa * i;
		float x = r * cos(step);
		float z = r * sin(step);

		glVertex3f(x, b, z);
	}
	glEnd();
	glPopMatrix();
}

------------------------------------------------------------------------------------

void CGLRenderer::DrawSphere(double r, int nSeg, double texU, double texV, double texR)
{
	double alfa = 2 * 3.14 / nSeg;
	double beta = 3.14 / nSeg;

	for (int i = 0; i < nSeg; i++)
	{
		for (int j = 0; j < nSeg * 2; j++)
		{
			double x1 = r * sin(beta * j) * cos(alfa * i);
			double y1 = r * cos(beta * j);
			double z1 = r * sin(beta * j) * sin(alfa * i);

			double x2 = r * sin(beta * j) * cos(alfa * (i + 1));
			double y2 = r * cos(beta * j);
			double z2 = r * sin(beta * j) * sin(alfa * (i + 1));

			double x3 = r * sin(beta * (j + 1)) * cos(alfa * (i + 1));
			double y3 = r * cos(beta * (j + 1));
			double z3 = r * sin(beta * (j + 1)) * sin(alfa * (i + 1));

			double x4 = r * sin(beta * (j + 1)) * cos(alfa * i);
			double y4 = r * cos(beta * (j + 1));
			double z4 = r * sin(beta * (j + 1)) * sin(alfa * i);

			double u1 = texU + x1 / r * texR;
			double v1 = texV + z1 / r * texR;

			double u2 = texU + x2 / r * texR;
			double v2 = texV + z2 / r * texR;

			double u3 = texU + x3 / r * texR;
			double v3 = texV + z3 / r * texR;

			double u4 = texU + x4 / r * texR;
			double v4 = texV + z4 / r * texR;

			glBegin(GL_QUADS);
				glTexCoord2f(u1, v1);
				glVertex3f(x1, y1, z1);
				glTexCoord2f(u2, v2);
				glVertex3f(x2, y2, z2);
				glTexCoord2f(u3, v3);
				glVertex3f(x3, y3, z3);
				glTexCoord2f(u4, v4);
				glVertex3f(x4, y4, z4);
			glEnd();
		}
	}
}

-----------------------------------------------------------------------------------------

void CGLRenderer::DrawCone(double r, double h, int nSeg, double texU, double texV, double texR)
{
	double alfa = 2 * 3.14 / nSeg;

	glBegin(GL_TRIANGLE_FAN);
	glTexCoord2f(texU, texV);
	glVertex3f(0, h, 0);
	for (int i = 0; i <= nSeg; i++)
	{
		double step = alfa * i;

		double x = r * cos(step);
		double z = r * sin(step);

		double u = texU + x / r * texR;
		double v = texV + z / r * texR;

		glTexCoord2f(u, v);
		glVertex3f(x, 0, z);
	}
	glEnd();

}

-----------------------------------------------------------------------------------------